// Este arquivo é gerado automaticamente. Não edite manualmente.
import { z } from 'zod';

export const WeaponIdEnum = z.enum([
  'weapon-adaga',
  'weapon-alabarda',
  'weapon-arco-curto',
  'weapon-arco-longo',
  'weapon-azagaia',
  'weapon-besta-de-mao',
  'weapon-besta-leve',
  'weapon-besta-pesada',
  'weapon-bordao',
  'weapon-chicote',
  'weapon-cimitarra',
  'weapon-clava',
  'weapon-clava-grande',
  'weapon-dardo',
  'weapon-espada-curta',
  'weapon-espada-grande',
  'weapon-espada-longa',
  'weapon-estrela-da-manha',
  'weapon-foice-curta',
  'weapon-funda',
  'weapon-glaive',
  'weapon-lanca',
  'weapon-maca',
  'weapon-machadinha',
  'weapon-machado-de-batalha',
  'weapon-machado-grande',
  'weapon-malho',
  'weapon-mangual',
  'weapon-martelo-de-guerra',
  'weapon-martelo-leve',
  'weapon-mosquete',
  'weapon-picareta-de-guerra',
  'weapon-pique',
  'weapon-pistola',
  'weapon-rapieira',
  'weapon-tridente'
]);

export const ToolIdEnum = z.enum([
  'tool-alchemists-supplies',
  'tool-artisans-tools',
  'tool-calligraphers-supplies',
  'tool-carpenters-tools',
  'tool-cartographers-tools',
  'tool-cooks-utensils',
  'tool-disguise-kit',
  'tool-forgery-kit',
  'tool-gaming-set',
  'tool-healers-kit',
  'tool-herbalism-kit',
  'tool-musical-instrument',
  'tool-navigators-tools',
  'tool-poisoners-kit',
  'tool-thieves-tools'
]);

export const GearIdEnum = z.enum([
  'gear-acido',
  'gear-agua-benta',
  'gear-antidoto',
  'gear-armadilha-de-caca',
  'gear-bedroll',
  'gear-book',
  'gear-cadeado',
  'gear-corda',
  'gear-corrente',
  'gear-costume',
  'gear-dice-set',
  'gear-esferas-metalicas',
  'gear-estrepes',
  'gear-fine-clothes',
  'gear-fogo-alquimico',
  'gear-frasco',
  'gear-holy-symbol',
  'gear-hooded-lantern',
  'gear-iron-pot',
  'gear-lampiao',
  'gear-lanterna-coberta',
  'gear-manacles',
  'gear-mirror',
  'gear-mochila',
  'gear-odre',
  'gear-oleo',
  'gear-parchment',
  'gear-pe-de-cabra',
  'gear-pederneira',
  'gear-perfume',
  'gear-pouch',
  'gear-robe',
  'gear-rope',
  'gear-shovel',
  'gear-tent',
  'gear-tocha',
  'gear-travelers-clothes',
  'gear-vela',
  'gear-veneno-basico'
]);

export const ArmorIdEnum = z.enum([
  'armor-armadura-acolchoada',
  'armor-armadura-de-aneis',
  'armor-armadura-de-couro',
  'armor-armadura-de-couro-batido',
  'armor-armadura-de-escamas',
  'armor-armadura-de-peles',
  'armor-armadura-de-placas',
  'armor-armadura-de-talas',
  'armor-camisao-de-malha',
  'armor-cota-de-malha',
  'armor-escudo',
  'armor-meia-armadura-de-placas',
  'armor-peitoral-de-aco'
]);

export const MusicalInstrumentIdEnum = z.enum([
  'musical-instrument-bagpipes',
  'musical-instrument-drum',
  'musical-instrument-flute',
  'musical-instrument-horn',
  'musical-instrument-lyre',
  'musical-instrument-pan-flute',
  'musical-instrument-shawm',
  'musical-instrument-viol'
]);

export const AllItemsEnum = z.union([
  WeaponIdEnum,
  ToolIdEnum,
  GearIdEnum,
  ArmorIdEnum,
  MusicalInstrumentIdEnum,
]);

export const ActionIdEnum = z.enum([
  'act-apply-effect',
  'act-attack',
  'act-cast-spell',
  'act-consume',
  'act-create-area-of-effect',
  'act-dash',
  'act-deceive',
  'act-disarm-trap',
  'act-disengage',
  'act-dodge',
  'act-help',
  'act-hide',
  'act-influence',
  'act-intimidate',
  'act-light-item',
  'act-magic',
  'act-multiattack',
  'act-persuade',
  'act-pick-lock',
  'act-ready',
  'act-search',
  'act-set-trap',
  'act-study',
  'act-throw',
  'act-use-object',
  'act-utilize',
  'bonus-cast-spell',
  'bonus-offhand-attack',
  'free-use-resource',
  'react-absorb-elements',
  'react-cast-shield',
  'react-opportunity-attack'
]);

export const SpellIdEnum = z.enum([
  'spell-aid',
  'spell-alarme',
  'spell-amizade-animal',
  'spell-armor-of-agathys',
  'spell-arms-of-hadar',
  'spell-bane',
  'spell-bless',
  'spell-bolha-acida',
  'spell-burning-hands',
  'spell-charm-person',
  'spell-chromatic-orb',
  'spell-color-spray',
  'spell-command',
  'spell-compelled-duel',
  'spell-comprehend-languages',
  'spell-create-or-destroy-water',
  'spell-cure-wounds',
  'spell-detect-evil-and-good',
  'spell-detect-magic',
  'spell-detect-poison-and-disease',
  'spell-detect-thoughts',
  'spell-disguise-self',
  'spell-dissonant-whispers',
  'spell-divine-favor',
  'spell-divine-smite',
  'spell-druidismo',
  'spell-elementalismo',
  'spell-ensnaring-strike',
  'spell-entangle',
  'spell-expeditious-retreat',
  'spell-faerie-fire',
  'spell-false-life',
  'spell-feather-fall',
  'spell-find-familiar',
  'spell-fog-cloud',
  'spell-friends',
  'spell-goodberry',
  'spell-grease',
  'spell-guidance',
  'spell-guiding-bolt',
  'spell-hail-of-thorns',
  'spell-healing-word',
  'spell-hellish-rebuke',
  'spell-heroism',
  'spell-hex',
  'spell-hunters-mark',
  'spell-ice-knife',
  'spell-identify',
  'spell-illusory-script',
  'spell-inflict-wounds',
  'spell-invisibility',
  'spell-jump',
  'spell-light',
  'spell-longstrider',
  'spell-luzes-dancantes',
  'spell-mage-armor',
  'spell-mage-hand',
  'spell-magic-missile',
  'spell-mending',
  'spell-message',
  'spell-mind-sliver',
  'spell-minor-illusion',
  'spell-misty-step',
  'spell-poison-spray',
  'spell-prestidigitation',
  'spell-produce-flame',
  'spell-protecao-contra-laminas',
  'spell-protection-from-evil-and-good',
  'spell-purify-food-and-drink',
  'spell-raio-de-fogo',
  'spell-rajada-mistica',
  'spell-ray-of-frost',
  'spell-ray-of-sickness',
  'spell-resistance',
  'spell-sacred-flame',
  'spell-sanctuary',
  'spell-searing-smite',
  'spell-shield',
  'spell-shield-of-faith',
  'spell-shillelagh',
  'spell-shocking-grasp',
  'spell-silent-image',
  'spell-sleep',
  'spell-sorcerous-burst',
  'spell-spare-the-dying',
  'spell-speak-with-animals',
  'spell-starry-wisp',
  'spell-tashas-hideous-laughter',
  'spell-tensers-floating-disk',
  'spell-thaumaturgy',
  'spell-thorn-whip',
  'spell-thunderclap',
  'spell-thunderous-smite',
  'spell-thunderwave',
  'spell-toll-the-dead',
  'spell-toque-arrepiante',
  'spell-true-strike',
  'spell-unseen-servant',
  'spell-vicious-mockery',
  'spell-witch-bolt',
  'spell-word-of-radiance',
  'spell-wrathful-smite'
]);

export const FeatIdEnum = z.enum([
  'feat-ability-score-improvement',
  'feat-actor',
  'feat-alert',
  'feat-archery',
  'feat-athlete',
  'feat-blessed-warrior',
  'feat-blindsight',
  'feat-boon-of-combat-prowess',
  'feat-boon-of-dimensional-travel',
  'feat-boon-of-energy-resistance',
  'feat-boon-of-fate',
  'feat-boon-of-fortitude',
  'feat-boon-of-irresistible-offense',
  'feat-boon-of-recovery',
  'feat-boon-of-skill',
  'feat-boon-of-speed',
  'feat-boon-of-spell-recall',
  'feat-boon-of-the-night-spirit',
  'feat-boon-of-truesight',
  'feat-charger',
  'feat-chef',
  'feat-crafter',
  'feat-crossbow-expert',
  'feat-crusher',
  'feat-defense',
  'feat-defensive-duelist',
  'feat-druidic-warrior',
  'feat-dual-wielder',
  'feat-dueling',
  'feat-durable',
  'feat-elemental-adept',
  'feat-fey-touched',
  'feat-grappler',
  'feat-great-weapon-fighting',
  'feat-great-weapon-master',
  'feat-healer',
  'feat-heavily-armored',
  'feat-heavy-armor-master',
  'feat-inspiring-leader',
  'feat-interception',
  'feat-keen-mind',
  'feat-lightly-armored',
  'feat-lucky',
  'feat-luta-com-duas-armas',
  'feat-mage-slayer',
  'feat-magic-initiate-cleric',
  'feat-magic-initiate-druid',
  'feat-magic-initiate-wizard',
  'feat-martial-weapon-training',
  'feat-medium-armor-master',
  'feat-moderately-armored',
  'feat-mounted-combatant',
  'feat-musician',
  'feat-observant',
  'feat-piercer',
  'feat-poisoner',
  'feat-polearm-master',
  'feat-protection',
  'feat-resilient',
  'feat-ritual-caster',
  'feat-savage-attacker',
  'feat-sentinel',
  'feat-shadow-touched',
  'feat-sharpshooter',
  'feat-shield-master',
  'feat-skill-expert',
  'feat-skilled',
  'feat-skulker',
  'feat-slasher',
  'feat-speedy',
  'feat-spell-sniper',
  'feat-tavern-brawler',
  'feat-telekinetic',
  'feat-telepathic',
  'feat-thrown-weapon-fighting',
  'feat-tough',
  'feat-unarmed-fighting',
  'feat-war-caster',
  'feat-weapon-master'
]);

export const SummonedTokenIdEnum = z.enum([
  'token-dancing-lights',
  'token-find-familiar',
  'token-hunting-trap-armed',
  'token-magic-hand',
  'token-minor-illusion',
  'token-silent-image',
  'token-tensers-floating-disk',
  'token-unseen-servant'
]);

export const MonsterIdEnum = z.enum([
  'monster-ape',
  'monster-awakened-shrub',
  'monster-baboon',
  'monster-badger',
  'monster-bat',
  'monster-black-bear',
  'monster-cat',
  'monster-cockatrice',
  'monster-commoner',
  'monster-crab',
  'monster-crawling-claw',
  'monster-crocodile',
  'monster-darkmantle',
  'monster-deer',
  'monster-dust-mephit',
  'monster-eagle',
  'monster-frog',
  'monster-gas-spore-fungus',
  'monster-giant-fire-beetle',
  'monster-giant-goat',
  'monster-giant-seahorse',
  'monster-giant-wasp',
  'monster-gnoll-warrior',
  'monster-goat',
  'monster-gray-ooze',
  'monster-hawk',
  'monster-hobgoblin-warrior',
  'monster-homunculus',
  'monster-hyena',
  'monster-ice-mephit',
  'monster-jackal',
  'monster-jackalwere',
  'monster-larva',
  'monster-lemure',
  'monster-lizard',
  'monster-magma-mephit',
  'monster-magmin',
  'monster-modron-tridrone',
  'monster-myconid-adult',
  'monster-myconid-sprout',
  'monster-octopus',
  'monster-owl',
  'monster-performer',
  'monster-piercer',
  'monster-piranha',
  'monster-rat',
  'monster-raven',
  'monster-reef-shark',
  'monster-rust-monster',
  'monster-sahuagin-warrior',
  'monster-satyr',
  'monster-scorpion',
  'monster-scout',
  'monster-seahorse',
  'monster-shadow',
  'monster-shrieker-fungus',
  'monster-spider',
  'monster-swarm-of-insects',
  'monster-tough',
  'monster-troll-limb',
  'monster-vine-blight',
  'monster-vulture',
  'monster-warhorse',
  'monster-warhorse-skeleton',
  'monster-weasel',
  'monster-worg'
]);

export const RootParameterPaths = z.enum([
  'activation.extraCost.amount',
  'activation.extraCost.resourceType',
  'activation.extraCost.source',
  'activation.triggers.conditionMode',
  'activation.triggers.events',
  'activation.type',
  'area.length',
  'area.radius',
  'area.selectionMode',
  'area.shape',
  'area.size',
  'area.unit',
  'attackBonus.value',
  'attackType',
  'charges.amount',
  'charges.max',
  'charges.roll.count',
  'charges.roll.faces',
  'charges.successOn',
  'charges.triggers.events',
  'charges.type',
  'choices.on',
  'choices.options',
  'choices.type',
  'overrideAbilityScore',
  'range.long',
  'range.normal',
  'range.unit',
  'requirements.target.events',
  'save.ability',
  'save.dc.attributes',
  'save.dc.base',
  'save.dc.type',
  'save.dc.value',
  'save.ignoreCovers',
  'target.details',
  'target.excludeSelf',
  'target.properties',
  'target.quantity',
  'target.selective',
  'target.type',
  'triggers.events'
]);

export const OutcomeParameterPaths = z.enum([
  'addedEffect.outcomes',
  'addedEffect.save.ability',
  'addedEffect.save.dc.type',
  'addedEffect.save.dc.value',
  'addedEffect.trigger',
  'allowedSizes',
  'amount',
  'appliesTo',
  'appliesToFilter.status',
  'attribute',
  'calculation.attribute',
  'calculation.base',
  'calculation.calculation',
  'charges',
  'condition',
  'damage.formula.damageTypeOptions',
  'damage.formula.roll.count',
  'damage.formula.roll.faces',
  'damage.formula.type',
  'details',
  'direction',
  'distance.unit',
  'distance.value',
  'duration.isConcentration',
  'duration.unit',
  'duration.value',
  'effect.actionId',
  'effect.condition',
  'effect.count',
  'effect.duration.isConcentration',
  'effect.duration.unit',
  'effect.duration.value',
  'effect.modifier.appliesTo',
  'effect.modifier.count',
  'effect.modifier.dice.count',
  'effect.modifier.dice.faces',
  'effect.modifier.faces',
  'effect.modifier.operation',
  'effect.modifier.target',
  'effect.name',
  'effect.on',
  'effect.outcomes',
  'effect.parameters.activation.type',
  'effect.parameters.attackType',
  'effect.parameters.outcomes',
  'effect.parameters.overrideAbilityScore',
  'effect.parameters.range.normal',
  'effect.parameters.range.unit',
  'effect.parameters.target.quantity',
  'effect.parameters.target.type',
  'effect.properties.bright',
  'effect.properties.dim',
  'effect.properties.duration.isConcentration',
  'effect.properties.duration.unit',
  'effect.properties.duration.value',
  'effect.requiresChoice',
  'effect.scaling.rules',
  'effect.scaling.type',
  'effect.skill',
  'effect.triggers.conditionMode',
  'effect.triggers.events',
  'effect.type',
  'effect.value',
  'formula.addSpellcastingModifier',
  'formula.damageTypeOptions',
  'formula.fixed',
  'formula.ifFalse.damageTypeOptions',
  'formula.ifFalse.roll.count',
  'formula.ifFalse.roll.faces',
  'formula.ifFalse.type',
  'formula.ifTrue.damageTypeOptions',
  'formula.ifTrue.roll.count',
  'formula.ifTrue.roll.faces',
  'formula.ifTrue.type',
  'formula.of',
  'formula.roll.bonus.value',
  'formula.roll.count',
  'formula.roll.explodeLimit',
  'formula.roll.explodesOn',
  'formula.roll.faces',
  'formula.type',
  'formula.variables.events',
  'id',
  'isDifficultTerrain',
  'itemId',
  'mode',
  'on',
  'operation',
  'properties.damageTypeOptions',
  'quantity',
  'requirements.target.events',
  'requirements.user.conditionMode',
  'requirements.user.events',
  'rules',
  'save.ability',
  'save.dc.type',
  'save.dc.value',
  'save.endsOnSuccess',
  'stacking',
  'status',
  'surfaceType',
  'target.quantity',
  'target.type',
  'targetRoll',
  'tokenId',
  'transformRules',
  'triggers.events',
  'type',
  'usesReaction',
  'value',
  'vitals'
]);
